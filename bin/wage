#!/usr/bin/env node
'use strict';

var program  = require('commander'),
    nconf = require('nconf'),
    inquirer = require('inquirer'),
    deferred = require('deferred'),
    moment = require('moment'),
    http = require('http'),
    parseString = require('xml2js').parseString;

require('autocmdr/lib/logger')(program);
require('autocmdr/lib/loader')(program);
require('autocmdr/lib/completion')(program);
require('autocmdr/lib/package')(program);
require('autocmdr/lib/config')(program);

var configPath = process.env.HOME + '/.wageconfig';
nconf.file({ file: configPath});

var gatherInputs = function() {
    var def = deferred();

    inquirer.prompt([{
        name: 'company',
        message: 'The name of your company (used in the tickspot url)'
    }, {
        name: 'email',
        message: 'Your E-Mail adress'
    }, {
        name: 'password',
        message: 'Your password (it is only saved to YOUR filesystem)'
    }, {
        name: 'wagePerHour',
        message: 'Your wage per hour'
    }], function(answers) {
        def.resolve(answers);
    });

    return def.promise;
}, setInputs = function(config) {
    nconf.set('company', config['company']);
    nconf.set('email', config['email']);
    nconf.set('password', config['password']);
    nconf.set('wagePerHour', config['wagePerHour']);

    nconf.save()
}, getEnoughInputToWork = function() {
    var company = nconf.get('company'),
        email = nconf.get('email'),
        password = nconf.get('password'),
        wagePerHour = parseInt(nconf.get('wagePerHour'), 10);

    if (company && email && password && wagePerHour) {
        var def = deferred();
        def.resolve({
            company: company,
            email: email,
            password: password,
            wagePerHour: wagePerHour
        });

        return def.promise;
    } else {
        var promise = gatherInputs();
        promise.then(function(configuration){
            setInputs(configuration);
        });

        return promise;
    }
},
getWorkingHoursForMonth = function(month, configuration) {
    var def = deferred();
    var email = configuration.email;
    var password = configuration.password;
    var company = configuration.company;
    var monthDate = moment().subtract(month, 'months');
    var start = monthDate.clone().startOf('month');
    var end = monthDate.clone().endOf('month');
    var dateFormat = 'YYYY-MM-DD';
    var startString = start.format(dateFormat);
    var endString = end.format(dateFormat);
    var url = 'http://weluse.tickspot.com/api/entries?email=' + email + '&password=' + password + '&start_date=' + startString + '&end_date=' + endString;

    http.get(url, function(res) {
        var xml = '';
        res.on('data', function(chunk) {
            xml += chunk;
        });

        res.on('end', function() {
            parseString(xml, function (err, result) {
                def.resolve(result);
            });
        });
    }).end();
    return def.promise;
},
extractHours = function(hours) {
    var hoursArray = hours.entries.entry;
    var _ = require('underscore-node');
    var totalHours = _.reduce(hoursArray, function(memo, item) {
        return memo + parseFloat(item.hours[0]._);
    }, 0);

    return totalHours;
},
wageForMonth = function(month){
    var def = deferred();

    getEnoughInputToWork().then(function(configuration) {
        getWorkingHoursForMonth(month, configuration).then(function(workingHours) {
            var hoursWorked = extractHours(workingHours),
                wagePerHour = configuration.wagePerHour,
                wage = hoursWorked * wagePerHour;

            def.resolve({hoursWorked: hoursWorked, wage: wage});
        });
    });

    return def.promise;
};

program
    .command('month [monthsAgo]')
    .description('Puts out the hours worked and the money gained. The parameter gives you the possibility to go back in time.')
    .action(function(monthsAgo) {
        wageForMonth(monthsAgo).then(function(res) {
            console.log('You worked %s hours, gaining %s Euro', res.hoursWorked, res.wage);
        });
    });

program
    .on('*', function(name) {
        console.log('\''+name+'\' is not a known command. See \'wage --help\':');
        program.outputHelp();
        process.exit(1);
    });


program
    .parse(process.argv);

if (program.args.length < 1 ) {
    process.exit(1);
}
